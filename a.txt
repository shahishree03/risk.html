unction updateAllFilters() {
    console.log('Updating all filters...');
    
    // Update main dashboard visualizations
    updateVisualization();
    
    // CRITICAL: Also update CVE Risk heatmap
    console.log('Triggering CVE Risk heatmap update from filters...');
    if (typeof drawCVERiskHeatmap === 'function') {
        drawCVERiskHeatmap();
    } else {
        console.warn('drawCVERiskHeatmap function not available');
    }
}

// Apply current filter values from the UI
function applyCurrentFilters() {
    console.log('Applying current filters from UI...');
    
    // Time period filter
    const timePeriodRadio = document.querySelector('input[name="time-period"]:checked');
    if (timePeriodRadio) {
        currentFilters.timePeriod = timePeriodRadio.value;
    }
    
    // Date type filter
    const dateTypeRadio = document.querySelector('input[name="date-type"]:checked');
    if (dateTypeRadio) {
        currentFilters.dateType = dateTypeRadio.value;
    }
    
    // CISA KEV filter
    const cisaKevRadio = document.querySelector('input[name="cisa-kev"]:checked');
    if (cisaKevRadio) {
        currentFilters.cisaKev = cisaKevRadio.value;
    }
    
    // Severity filter
    const severityCheckboxes = document.querySelectorAll('input[name="severity"]:checked');
    currentFilters.severities = Array.from(severityCheckboxes).map(cb => cb.value.toUpperCase());
    
    // Geography filter
    const geographyRadio = document.querySelector('input[name="geography"]:checked');
    if (geographyRadio) {
        currentFilters.geography = geographyRadio.value;
    }
    
    // EPSS range
    const epssMin = document.getElementById('epss-min');
    const epssMax = document.getElementById('epss-max');
    if (epssMin && epssMax) {
        currentFilters.epssRange = [parseFloat(epssMin.value), parseFloat(epssMax.value)];
    }
    
    // CVSS range
    const cvssMin = document.getElementById('cvss-min');
    const cvssMax = document.getElementById('cvss-max');
    if (cvssMin && cvssMax) {
        currentFilters.cvssRange = [parseFloat(cvssMin.value), parseFloat(cvssMax.value)];
    }
    
    // Exploit maturity filter
    const exploitCheckboxes = document.querySelectorAll('input[name="exploit-maturity"]:checked');
    currentFilters.exploitMaturity = Array.from(exploitCheckboxes).map(cb => cb.value);
    
    // Date range
    const startDate = document.getElementById('start-date');
    const endDate = document.getElementById('end-date');
    if (startDate && endDate) {
        currentFilters.dateRange.startDate = startDate.value || null;
        currentFilters.dateRange.endDate = endDate.value || null;
    }
    
    console.log('Applied filters:', currentFilters);
    
    // Update all filters
    updateAllFilters();
}
